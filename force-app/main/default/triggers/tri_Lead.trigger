/**
 * @description       : 리드 개체 트리거
 * @author            : ms.kim
 * @group             : 
 * @last modified on  : 02-28-2024
 * @last modified by  : ms.kim
**/
trigger tri_Lead on Lead (before insert, after insert, before update, before delete, after update) {
    if(Trigger.isBefore){
        if(Trigger.isInsert){
            
            User objUser = [SELECT Id, Name FROM User WHERE Id =: UserInfo.getUserId() LIMIT 1];

            List<Lead> LastLead = [SELECT LeadNumber__c 
                                   FROM Lead 
                                   WHERE IsDeleted = false 
                                   ORDER BY LeadNumber__c DESC 
                                   LIMIT 1];
            Decimal LastLeadNumber;
            
            if(!LastLead.isEmpty()){
                for(Lead ll : LastLead){
                    LastLeadNumber = Decimal.valueOf(ll.LeadNumber__c);
                }
            }else{
                LastLeadNumber = 0;
            }
            
            for(Lead od : Trigger.new){
                // 예비고객번호 AutoNumber
                if(od.LeadNumber__c == null){
                    String autogenerated = String.valueOf(LastLeadNumber + 1);
                    autogenerated = autogenerated.leftPad(6,'0');
                    od.LeadNumber__c = autogenerated;
                    LastLeadNumber++;
                }
                
                // 마지막 할당교사 없을 때 로그인 유저
                if(od.LastAssign__c == null) od.LastAssign__c = od.OwnerId ==null ? objUser.Id : od.OwnerId;
                
                if(od.MobilePhone != null){
                    od.MobilePhone = od.MobilePhone.replaceAll('[^0-9]', '');
                    if (od.MobilePhone.length() == 10) {
                        string FirstNum = od.MobilePhone.substring(0, 3);
                        string MiddleNum = od.MobilePhone.substring(3, 6);
                        string LastNum = od.MobilePhone.substring(6);
                        od.MobilePhone = FirstNum + '-' + MiddleNum + '-' + LastNum;
                    } else if (od.MobilePhone.length() == 11) {
                        string FirstNum = od.MobilePhone.substring(0, 3);
                        string MiddleNum = od.MobilePhone.substring(3, 7);
                        string LastNum = od.MobilePhone.substring(7);
                        od.MobilePhone = FirstNum + '-' + MiddleNum + '-' + LastNum;
                    }
                } 

                // 신청일시 Update
                if(od.RequestDateTime__c == null) od.RequestDateTime__c = DateTime.now();
                od.RequestDateTime_AddWeekday__c = od.RequestDateTime__c != null ? Utilities.transDateTimeFormat(od.RequestDateTime__c) : '';

                // 자녀생일 입력 시 자녀 학년 기본값 입력
                if(od.ChildBirthday__c != null && od.ChildSchoolYear__c == null){
                    Decimal Childyear = System.today().year() - od.ChildBirthday__c.year() +1;
                    od.ChildSchoolYear__c = Childyear > 16 ? '기타' : String.valueOf(Childyear);
                }
            }
        }   
        
        if(Trigger.isUpdate){

            Set<Id> curuser_ids = new Set<Id>();
            for(Lead od : Trigger.new){
                Lead old_od = Trigger.oldMap.get(od.Id);
                if(old_od.OwnerId != od.OwnerId){
                    curuser_ids.add(UserInfo.getUserId());
                }
            }
            
            Map<Id, User> cur_usermap = new Map<Id, User>([SELECT Id
                                                            , UserRole.Name
                                                            , UserRole.DeveloperName    
                                                        FROM User 
                                                        WHERE IsActive = true
                                                        AND Id IN: curuser_ids]);
            
            CustomNotificationType notiType = [SELECT Id, DeveloperName FROM CustomNotificationType WHERE DeveloperName = 'LeadReAssignNotification' limit 1];

            for(Lead od : Trigger.new){
                Lead old_od = Trigger.oldMap.get(od.Id);

                if(!cur_usermap.isEmpty()){
                    User cur_user = cur_usermap.get(UserInfo.getUserId());
                    
                    if(cur_user != null && (cur_user.UserRole.Name == '본사' || cur_user.UserRole.DeveloperName.contains('Manager'))){
                        if(od.OwnerId == od.LastAssign__c && od.Batch__c == false){
                            // 최종배분교사에게 회수 후 재분배 불가 Validate
                            od.addError(Label.CLS_ReAssign);
                        }else{
                            // 본사계정 -> 표준사용자 OwnerId 변경 시
                            // 1. 마지막 분배교사 Update
                            // 2. 재배정 == Y
                            // 3. 배치 Flag = false
                            od.LastAssign__c = od.OwnerId;
                            od.ReAssign__c = 'Y';
                            od.Batch__c = false;

                            // 재할당 후 상담교사에게 알림
                            String formatDT = Utilities.transDateTimeFormat(Datetime.now());
                            Set<String> singleTargetUserId = new Set<String>{od.OwnerId};
                            String title = '재할당 건 알림입니다.';
                            String body = od.LastName+'님이 '+formatDT+ '에 재할당되었습니다.';
                            UTIL_Notification.unCalloutNotiSend(notiType.Id, cur_user.Id, od.Id, title, body, singleTargetUserId);
                        }
                    }else if(cur_user.UserRole.Name.contains('상담파트') && od.Batch__c == false){
                        // 상담교사는 Owner 변경 시 validate
                        od.addError(Label.CLS_ReAssign2);
                    }
                }

                // 자녀생일 변경 시 자녀 학년 기본값 업데이트
                if(old_od.ChildBirthday__c != od.ChildBirthday__c){
                    if(od.ChildBirthday__c != null){
                        Decimal Childyear = System.today().year() - od.ChildBirthday__c.year() +1;
                        od.ChildSchoolYear__c = Childyear > 16 ? '기타' : String.valueOf(Childyear);
                    }else{
                        od.ChildSchoolYear__c = null;
                    }
                }

                // 필수값 (이름/주소/핸드폰/우편번호) 확인 Validate
                if(od.IsConverted == true && (od.LastName == null 
                                              || od.Street == null 
                                              || od.MobilePhone == null 
                                              || od.PostalCode == null
                                            )){
                    od.addError(Label.CLS_Required);
                }

                // 2024-02-28 ~ 2024-02-29 신청일시 변경에 따른 텍스트 업데이트
                if(old_od.RequestDateTime__c != od.RequestDateTime__c && od.RequestDateTime__c != null){
                    od.RequestDateTime_AddWeekday__c = od.RequestDateTime__c != null ? Utilities.transDateTimeFormat(od.RequestDateTime__c) : '';
                }
            }
        }

        if(Trigger.isDelete){
            User usr = [SELECT Id
                            , Profile.Name 
                        FROM User 
                        WHERE IsActive = true 
                        AND Id=:UserInfo.getUserId() 
                        LIMIT 1];

            if(usr.Profile.Name == 'System Administrator' || usr.Profile.Name == '시스템 관리자' ){     
                //시스템 관리자는 Delete 허용.
            }else{
                for(Lead od : Trigger.old){
                    od.addError('삭제 할 수 없습니다.');
                }
            }
        }
    }

    if(Trigger.isAfter){
        // Dohun 2024.02.14 feedInsert 추가
         if(Trigger.isInsert){
             List<FeedTracking__c> ft_List = new List<FeedTracking__c>();
             Set<String> LeadSourceSet = new Set<String>();
             Map<String,LeadSource__c> LeadSourceMap = new Map<String,LeadSource__c>();
            
             for(Lead od : Trigger.new){
                 if(od.LeadSource__c!=null) LeadSourceSet.add(od.LeadSource__c);
             }
             List<LeadSource__c> LeadSourceList = new List<LeadSource__c>([SELECT Id, Name, Code__c FROM LeadSource__c WHERE Id IN :LeadSourceSet]);
             for(LeadSource__c ls : LeadSourceList){
                 LeadSourceMap.put(ls.Id,ls);
             }

             for(Lead od : Trigger.new){
                 FeedTracking__c insFeed = new FeedTracking__c(
                     Lead__c = od.Id
                     ,ReAssign__c = '신규'
                     ,FieldAPIName__c = '신규'
                     ,LeadSource__c = LeadSourceMap.get(od.LeadSource__c).Name
                 );

                ft_List.add(insFeed);
             }
             if(ft_List?.size()>0) INSERT ft_List;
        }
        /////////
        if(Trigger.isUpdate){

            List<FeedTracking__c> ft_List = new List<FeedTracking__c>();
            Map<Id, Id> lead_oppty_map = new Map<Id,Id>();
            Set<Id> oppty_ids = new Set<Id>();
            for(Lead od : Trigger.new){
                Lead old_od = Trigger.oldMap.get(od.Id);
                
                // 변환 시 이력관리 연결

                if(od.IsConverted == true && old_od.IsConverted == false){
                    lead_oppty_map.put(od.Id, od.ConvertedOpportunityId);
                    oppty_ids.add(od.ConvertedOpportunityId);
                }
                
                // 특이사항 이력생성
                if(old_od.Note__c != od.Note__c && od.Note__c != null){
                    ft_List.add(
                        new FeedTracking__c(
                            Value__c = od.Note__c
                            , FieldAPIName__c = 'Note__c'
                            , Lead__c = od.Id
                    ));
                }
            }

            for(FeedTracking__c ft : [SELECT Id
                                            , Lead__c
                                            , Opportunity__c 
                                        FROM FeedTracking__c 
                                        WHERE IsDeleted = false 
                                        AND Lead__c IN: lead_oppty_map.keyset()]){
                Id oppty_id = lead_oppty_map.get(ft.Lead__c);
                ft_List.add(
                    new FeedTracking__c(
                        Id = ft.Id
                        , Opportunity__c = oppty_id
                        , Lead__c = ft.Lead__c
                ));
            }

            Map<Id,Opportunity> oppty_map = new Map<Id,Opportunity>([SELECT Id
                                                                            , ParentAddress__Street__s
                                                                            , ParentAddress__PostalCode__s 
                                                                     		, ParentPhone__c
                                                                    FROM Opportunity 
                                                                    WHERE IsDeleted = false 
                                                                    AND Id IN: oppty_ids]);
            List<Opportunity> oppty_list = new List<Opportunity>();
            
            // 1.기회 주소 = 리드 주소
            // 2.기회 부모전화번호 = 리드 휴대폰
            if(!oppty_map.isEmpty()){
                for(Lead od : Trigger.new){
                    Opportunity oppty = oppty_map.get(od.ConvertedOpportunityId);
                    if(oppty != null && oppty.ParentPhone__c == null){
                        oppty.ParentAddress__PostalCode__s = od.PostalCode;
                        oppty.ParentAddress__Street__s = od.Street;
                        oppty.ParentPhone__c = od.MobilePhone;
                        oppty_list.add(oppty);
                    }
                }
            }

            if(!ft_List.isEmpty()) upsert ft_List;
            if(!oppty_list.isEmpty()) update oppty_list;
        }
    }
}